# $Id: td_make.in,v 12.14 1997/09/11 10:33:56 tom Exp $
# common definitions for makefiles built over TD_LIB library.

SHELL	= /bin/sh
@SET_MAKE@

####### (Environment) ##########################################################
# TOP	= ../../.. -- must define
TD_LIB	= $(TOP)/lib
TD_INC	= $(TOP)/include

AR	= ar crv
RM	= rm -f
LINT	= @LINT@
CTAGS	= dotags

GET	= checkout
COPY	= cp
PUT	= $(RM) $@; $(COPY) $? $@
MAKE	= @MAKE@ @cf_cv_makeflags@

CC		= @CC@
CPP		= @CPP@
INSTALL		= @INSTALL@
INSTALL_PROGRAM	= @INSTALL_PROGRAM@
INSTALL_DATA	= @INSTALL_DATA@
RANLIB		= @RANLIB@

EXTRA_CFLAGS	= @EXTRA_CFLAGS@
CFLAGS		= @CFLAGS@
#LINK		= purify $(CC) $(CFLAGS)
LINK		= $(CC) $(CFLAGS)

prefix		= @prefix@
exec_prefix	= @exec_prefix@

INSTALL_BIN	= $(exec_prefix)/bin
INSTALL_LIB	= $(exec_prefix)/lib
INSTALL_MAN	= $(prefix)/man

####### (Command-line Options) #################################################
INCLUDES	= -I. -I$(TD_INC) @INCLUDES@
DEFINES		= -DHAVE_CONFIG_H
CPP_OPTS	= $(DEFINES) $(INCLUDES)

LIB_DEPS	= $(TD_LIB)/libtd.a
LIB_ARGS	= -L$(TD_LIB) -ltd @LIBS@
DATE		= echo '** '`date` >> $@

LINTLIBS	= -ltd @LIBS@
LINTOPTS	= $(CPP_OPTS) -DNO_IDENT $(LINTLIBS)

####### (Standard Lists) #######################################################
# don't put .a into CLEAN, because VERDIX-ADA uses that for source!
CLEAN	= *.[oi] *.lint *.bak *.log *.out *.tst .nfs* *.pure* core tags
DESTROY	=$(SHELL) -c 'for i in *;do case $$i in RCS);; *) $(RM) $$i;;esac;done;exit 0'
RUN_TESTS=$(SHELL) -c '$@.sh 2>&1 | tee -a $@.out'

PTYPES_H =	$(TD_INC)/ptypes.h \
		$(TD_INC)/td_ext.h \
		$(TD_INC)/td_lib.h \
		$(TD_INC)/td_config.h
CURSES_H =	$(PTYPES_H) \
		$(TD_INC)/td_curse.h
QSORT_H =	$(PTYPES_H) \
		$(TD_INC)/td_qsort.h
RCSDEFS_H =	$(PTYPES_H) \
		$(TD_INC)/rcsdefs.h \
		$(TD_INC)/deltree.h
SCCSDEFS_H =	$(PTYPES_H) \
		$(TD_INC)/sccsdefs.h

####### (Development) ##########################################################
CPROTO	= cproto -e -i -fo'\\n\\t\\t' -fp'\\n\\t\\t'

LINT_EACH = $(SHELL) -c 'for i in $?;do echo $$i:; $(LINT) $(LINTOPTS) $$i >>$@;done'

#.SUFFIXES:
.SUFFIXES: .c .o .a

.c.o:
	@echo compiling $<
	@ECHO_CC@$(CC) $(CPP_OPTS) $(CFLAGS) $(EXTRA_CFLAGS) -c $<
.o.a:
	@$(AR) $@ $*.o
	-@$(RM) $*.o
.c.a:
	@echo compiling $<
	@ECHO_CC@$(CC) $(CPP_OPTS) $(CFLAGS) $(EXTRA_CFLAGS) -c $<
	@$(AR) $@ $*.o
	-@$(RM) $*.o

.SUFFIXES: .i .proto .lint .tst

.c.i:		; $(CC) $(CPP_OPTS) -E -C $< >$@
.c.proto:	; $(CPROTO) $(CPP_OPTS) $< >$@
.c.lint:	; $(LINT) $(LINTOPTS) $< >$@

.c.tst:
	@ECHO_LD@$(CC) -o $@ -DTEST $(CFLAGS) $(EXTRA_CFLAGS) $(CPP_OPTS) $< $Z $(LIB_ARGS)

.SUFFIXES: .man .cat

.man.cat:
	-$(RM) $@
	nroff -man $? >$@
